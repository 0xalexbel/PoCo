@startuml

iExecCloudUser -> MyDapp

box "Smart contracts"
	participant MyDapp
	participant IexecHub
	participant TaskRequest
  participant WorkerPool
  participant Contributions
end box


autonumber 4

MyDapp --> IexecHub: createTaskRequest(app,dataset,workerpool)
activate IexecHub
note over IexecHub : check smart contract app, workerpool, dataset (optional) asked are well registered
create TaskRequest
autonumber 4
IexecHub --> TaskRequest: createTaskRequest
note over TaskRequest :TaskRequestStatusEnum.PENDING
note over IexecHub : debit RLC user
activate TaskRequest
autonumber 4

IexecHub <-- TaskRequest
deactivate TaskRequest
note over IexecHub :Log event TaskRequest(taskId,workerPool)
autonumber 4
MyDapp <-- IexecHub

deactivate IexecHub

box "Spring boot app" #LightBlue
	participant iexec_scheduler
  participant iexec_worker
end box


box "Repository" #Bisque
	participant AppRepository
    participant DatasetRepository
end box



autonumber 4
IexecHub o-> iexec_scheduler : watch TaskRequest(taskId,workerPool) event
activate iexec_scheduler
iexec_scheduler -> iexec_scheduler : analyse asked task
autonumber 5
iexec_scheduler --> IexecHub : acceptTask(taskId)
activate IexecHub
autonumber 5
IexecHub --> WorkerPool
activate WorkerPool
autonumber 5
create Contributions
WorkerPool --> Contributions
activate Contributions
note over Contributions :ConsensusStatusEnum.IN_PROGRESS
autonumber 5
Contributions --> WorkerPool
deactivate Contributions
autonumber 5
WorkerPool --> IexecHub
deactivate WorkerPool
autonumber 5
IexecHub --> TaskRequest
activate TaskRequest
note over TaskRequest :TaskRequestStatusEnum.ACCEPTED
autonumber 5
TaskRequest --> IexecHub
deactivate TaskRequest
note over IexecHub :Log event TaskAccepted(taskID,workerPool,contributions);
autonumber 5
IexecHub --> iexec_scheduler
deactivate IexecHub
deactivate iexec_scheduler
autonumber 5
IexecHub o-> iexec_scheduler : watch TaskAccepted(taskID,workerPool,contributions) event

autonumber 6
activate iexec_scheduler
iexec_scheduler -> iexec_scheduler : randonmy choose worker

autonumber 6
iexec_scheduler  --> Contributions : callForContribution(taskId,worker)
activate Contributions
note over Contributions :Log event CallForContribution(worker);
autonumber 6
Contributions --> iexec_scheduler
deactivate Contributions

deactivate iexec_scheduler
autonumber 6
Contributions o-> iexec_worker : watch CallforContribution event
activate iexec_worker
iexec_worker  <--> AppRepository : getApp
autonumber 7
autonumber 7
iexec_worker  <--> DatasetRepository : getDataset

autonumber 7
iexec_worker-> iexec_worker: execute the asked work
activate iexec_worker
autonumber 7
iexec_worker-> iexec_worker: resultHash (vote)
autonumber 7
iexec_worker-> iexec_worker: resultSigned(proof of knowledge)
autonumber 7
iexec_worker  --> Contributions : contribute(resultHash,resultSigned)
deactivate  iexec_worker


activate Contributions
note over Contributions :Log event Contribute(worker,resultHash(vote));
deactivate Contributions
autonumber 7
Contributions  --> iexec_worker
deactivate  iexec_worker
deactivate Contributions
autonumber 7
Contributions o-> iexec_scheduler : watch Contribute(worker,resultHash(vote)) event
activate iexec_scheduler

autonumber 8
iexec_scheduler -> iexec_scheduler: check if consensus on resultHash is reached
autonumber 8
iexec_scheduler --> Contributions : revealConsensus
activate Contributions
note over Contributions :ConsensusStatusEnum.REACHED
note over Contributions :consensus on resultHash is revealed
note over Contributions : a limited REVEAL_PERIOD is start in the smart contract
note over Contributions :Log event RevealConsensus(consensus)
autonumber 8
Contributions --> iexec_scheduler
deactivate iexec_scheduler
deactivate Contributions
autonumber 8
Contributions o-> iexec_worker : watch RevealConsensus event
activate iexec_worker
autonumber 9
iexec_worker  --> Contributions  :reveal(result)
activate Contributions
note over Contributions : during the REVEAL_PERIOD, workers reveal \n(result and salt ) for the following rewards
note over Contributions :Log event Reveal(worker,result);

autonumber 9
Contributions  --> iexec_worker
deactivate Contributions
deactivate iexec_worker
autonumber 9
Contributions o-> iexec_scheduler : watch Reveal event
activate iexec_scheduler

autonumber 10
iexec_scheduler -> iexec_scheduler : check if all workers are reveal or reveal period end
autonumber 10
iexec_scheduler  <--> iexec_worker  : getResult
note over iexec_scheduler : iexec_scheduler ask and retrived result on worker who has revealed a right contribution

autonumber 10
iexec_scheduler --> Contributions : finalizedTask(stdout,stderr,uri)
activate Contributions
autonumber 10
note over Contributions : ConsensusStatusEnum.FINALIZED
autonumber 10
Contributions --> IexecHub :finalizedTask
autonumber 10
activate IexecHub

IexecHub --> TaskRequest :setResult(stdout,stderr,uri)
activate TaskRequest
autonumber 10
note over TaskRequest : TaskRequestStatusEnum.COMPLETED
TaskRequest <--> MyDapp : taskRequestCallback
autonumber 10
TaskRequest -> IexecHub

deactivate TaskRequest
note over IexecHub : RLC reward/seize for actors
autonumber 10
IexecHub --> Contributions
deactivate IexecHub
autonumber 10
Contributions --> iexec_scheduler : finalizedTask
deactivate Contributions
deactivate iexec_scheduler
deactivate TaskRequest
@enduml
