@startuml

iExecCloudUser -> MyDapp

box "Smart contracts"
	participant MyDapp
	participant IexecHub
	participant WorkOrder
  participant WorkerPool
end box


autonumber 4

MyDapp --> IexecHub: createWorkOrder(app,dataset,workerpool)
activate IexecHub
note over IexecHub : check smart contract app, workerpool, dataset (optional) asked are well registered
create WorkOrder
autonumber 4
IexecHub --> WorkOrder: createWorkOrder
note over WorkOrder :WorkOrderStatusEnum.PENDING
note over IexecHub : debit RLC user
activate WorkOrder
autonumber 4

deactivate WorkOrder
IexecHub <-- WorkOrder
autonumber 4
IexecHub --> WorkerPool :receivedWorkOrder
activate WorkerPool
note over WorkerPool :Log event WorkOrderReceived(woid)
autonumber 4
IexecHub <-- WorkerPool
deactivate WorkerPool
autonumber 4



note over IexecHub :Log event WorkOrder(woid,workerPool)
autonumber 4
MyDapp <-- IexecHub

deactivate IexecHub
WorkerPool o-> iexec_scheduler : watch WorkOrderReceived(woid) event

activate iexec_scheduler

iexec_scheduler -> iexec_scheduler : analyse asked workeOrder

box "Spring boot app" #LightBlue
	participant iexec_scheduler
  participant iexec_worker
end box


box "Repository" #Bisque
	participant AppRepository
    participant DatasetRepository
end box



autonumber 5
iexec_scheduler --> WorkerPool : acceptWorkOrder(woid,workers)
activate WorkerPool
autonumber 5

autonumber 5
WorkerPool --> IexecHub
activate IexecHub

autonumber 5
IexecHub --> WorkOrder
note over IexecHub :Log event WorkOrderAccepted(woid);
deactivate IexecHub

note over WorkOrder :WorkOrderStatusEnum.SCHEDULED

note over WorkerPool :Log event WorkOrderAccepted(woid);
autonumber 5


deactivate iexec_scheduler
autonumber 5
WorkerPool o-> iexec_scheduler : watch WorkOrderAccepted(woid,workerPool) event
deactivate WorkerPool
autonumber 6
activate iexec_scheduler
iexec_scheduler -> iexec_scheduler : randonmy choose worker

autonumber 6
iexec_scheduler  --> WorkerPool : callForContribution(woid,workers)
activate WorkerPool
note over WorkerPool :Log event CallForContribution(worker);
autonumber 6
WorkerPool --> iexec_scheduler
deactivate WorkerPool

deactivate iexec_scheduler
autonumber 6
WorkerPool o-> iexec_worker : watch CallforContribution event
activate iexec_worker
iexec_worker  <--> AppRepository : getApp
autonumber 7
autonumber 7
iexec_worker  <--> DatasetRepository : getDataset

autonumber 7
iexec_worker-> iexec_worker: execute the asked work
activate iexec_worker
autonumber 7
iexec_worker-> iexec_worker: resultHash (vote)
autonumber 7
iexec_worker-> iexec_worker: resultSigned(proof of knowledge)
autonumber 7
iexec_worker  --> WorkerPool : contribute(resultHash,resultSigned)
deactivate  iexec_worker


activate WorkerPool
note over WorkerPool :Log event Contribute(worker,resultHash(vote));
deactivate WorkerPool
autonumber 7
WorkerPool  --> iexec_worker
deactivate  iexec_worker
deactivate WorkerPool
autonumber 7
WorkerPool o-> iexec_scheduler : watch Contribute(worker,resultHash(vote)) event
activate iexec_scheduler

autonumber 8
iexec_scheduler -> iexec_scheduler: check if consensus on resultHash is reached
autonumber 8
iexec_scheduler --> WorkerPool : revealConsensus
activate WorkerPool
note over WorkOrder :WorkOrderStatusEnum.REVEALING
note over WorkerPool :consensus on resultHash is revealed
note over WorkerPool : a limited REVEAL_PERIOD is start in the smart contract
note over WorkerPool :Log event RevealConsensus(consensus)
autonumber 8
WorkerPool --> iexec_scheduler
deactivate iexec_scheduler
deactivate WorkerPool
autonumber 8
WorkerPool o-> iexec_worker : watch RevealConsensus event
activate iexec_worker
autonumber 9
iexec_worker  --> WorkerPool  :reveal(result)
activate WorkerPool
note over WorkerPool : during the REVEAL_PERIOD, workers reveal \n(result and salt ) for the following rewards
note over WorkerPool :Log event Reveal(worker,result);

autonumber 9
WorkerPool  --> iexec_worker
deactivate WorkerPool
deactivate iexec_worker
autonumber 9
WorkerPool o-> iexec_scheduler : watch Reveal event
activate iexec_scheduler

autonumber 10
iexec_scheduler -> iexec_scheduler : check if all workers are reveal or reveal period end
autonumber 10
iexec_scheduler  <--> iexec_worker  : getResult
note over iexec_scheduler : iexec_scheduler ask and retrived result on worker who has revealed a right contribution

autonumber 10
iexec_scheduler --> WorkerPool : finalizedWork(stdout,stderr,uri)
activate WorkerPool
autonumber 10
WorkerPool --> IexecHub :finalizedWorkOrder
autonumber 10
activate IexecHub

IexecHub --> WorkOrder :setResult(stdout,stderr,uri)
activate WorkOrder
autonumber 10
note over WorkOrder : WorkOrderStatusEnum.COMPLETED
WorkOrder <--> MyDapp : workOrderCallback
autonumber 10
WorkOrder -> IexecHub

deactivate WorkOrder
note over IexecHub : RLC reward/seize for actors
autonumber 10
IexecHub --> WorkerPool
deactivate IexecHub
autonumber 10
WorkerPool --> iexec_scheduler : finalizedWork
deactivate WorkerPool
deactivate iexec_scheduler
deactivate WorkOrder
@enduml
