@startuml

iExecCloudUser -> MyDapp

box "Smart contracts"
	participant MyDapp
	participant IexecHub
	participant TaskRequest
    participant WorkerPool
    participant Contributions
end box


autonumber 4

MyDapp --> IexecHub: createTaskRequest(app,dataset,workerpool)
activate IexecHub
note over IexecHub : check smart contract app, workerpool, dataset (optional) asked are well registered
create TaskRequest
autonumber 4
IexecHub --> TaskRequest: createTaskRequest
note over TaskRequest :TaskRequestStatusEnum.PENDING
note over IexecHub : debit RLC user
activate TaskRequest
autonumber 4

IexecHub <-- TaskRequest
deactivate TaskRequest
note over IexecHub :Log event TaskRequest(taskId,workerPool)
autonumber 4
MyDapp <-- IexecHub

deactivate IexecHub

box "Spring boot app" #LightBlue
	participant Dispatcher
    participant Worker
end box


box "Repository" #Bisque
	participant AppRepository
    participant DatasetRepository
end box



autonumber 4
IexecHub o-> Dispatcher : watch TaskRequest(taskId,workerPool) event
activate Dispatcher
Dispatcher -> Dispatcher : analyse asked task
autonumber 5
Dispatcher --> IexecHub : acceptTask(taskId)
activate IexecHub
autonumber 5
IexecHub --> WorkerPool
activate WorkerPool
autonumber 5
create Contributions
WorkerPool --> Contributions
activate Contributions
note over Contributions :ConsensusStatusEnum.IN_PROGRESS
autonumber 5
Contributions --> WorkerPool
deactivate Contributions
autonumber 5
WorkerPool --> IexecHub
deactivate WorkerPool
autonumber 5
IexecHub --> TaskRequest
activate TaskRequest
note over TaskRequest :TaskRequestStatusEnum.ACCEPTED
autonumber 5
TaskRequest --> IexecHub
deactivate TaskRequest
note over IexecHub :Log event TaskAccepted(taskID,workerPool,contributions);
autonumber 5
IexecHub --> Dispatcher
deactivate IexecHub
deactivate Dispatcher
autonumber 5
IexecHub o-> Dispatcher : watch TaskAccepted(taskID,workerPool,contributions) event

autonumber 6
activate Dispatcher
Dispatcher -> Dispatcher : randonmy choose worker

autonumber 6
Dispatcher  --> Contributions : callForContribution(taskId,worker)
activate Contributions
note over Contributions :Log event CallForContribution(worker);
autonumber 6
Contributions --> Dispatcher
deactivate Contributions

deactivate Dispatcher
autonumber 6
Contributions o-> Worker : watch CallforContribution event
activate Worker
Worker  <--> AppRepository : getApp
autonumber 7
autonumber 7
Worker  <--> DatasetRepository : getDataset

autonumber 7
Worker-> Worker: execute the asked work
activate Worker
autonumber 7
Worker-> Worker: resultHash (vote)
autonumber 7
Worker-> Worker: resultSigned(proof of knowledge)
autonumber 7
Worker  --> Contributions : contribute(resultHash,resultSigned)
deactivate  Worker


activate Contributions
note over Contributions :Log event Contribute(worker,resultHash(vote));
deactivate Contributions
autonumber 7
Contributions  --> Worker
deactivate  Worker
deactivate Contributions
autonumber 7
Contributions o-> Dispatcher : watch Contribute(worker,resultHash(vote)) event
activate Dispatcher

autonumber 8
Dispatcher -> Dispatcher: check if consensus on resultHash is reached
autonumber 8
Dispatcher --> Contributions : revealConsensus
activate Contributions
note over Contributions :ConsensusStatusEnum.REACHED
note over Contributions :consensus on resultHash is revealed
note over Contributions : a limited REVEAL_PERIOD is start in the smart contract
note over Contributions :Log event RevealConsensus(consensus)
autonumber 8
Contributions --> Dispatcher
deactivate Dispatcher
deactivate Contributions
autonumber 8
Contributions o-> Worker : watch RevealConsensus event
activate Worker
autonumber 9
Worker  --> Contributions  :reveal(result)
activate Contributions
note over Contributions : during the REVEAL_PERIOD, workers reveal \n(result and salt ) for the following rewards
note over Contributions :Log event Reveal(worker,result);

autonumber 9
Contributions  --> Worker
deactivate Contributions
deactivate Worker
autonumber 9
Contributions o-> Dispatcher : watch Reveal event
activate Dispatcher

autonumber 10
Dispatcher -> Dispatcher : check if all workers are reveal or reveal period end
autonumber 10
Dispatcher  <--> Worker  : getResult
note over Dispatcher : Dispatcher ask and retrived result on worker who has revealed a right contribution

autonumber 10
Dispatcher --> Contributions : finalizedTask(stdout,stderr,uri)
activate Contributions
autonumber 10
note over Contributions : ConsensusStatusEnum.FINALIZED
autonumber 10
Contributions --> IexecHub :finalizedTask
autonumber 10
activate IexecHub

IexecHub --> TaskRequest :setResult(stdout,stderr,uri)
activate TaskRequest
autonumber 10
note over TaskRequest : TaskRequestStatusEnum.COMPLETED
TaskRequest <--> MyDapp : taskRequestCallback
autonumber 10
TaskRequest -> IexecHub

deactivate TaskRequest
note over IexecHub : RLC reward/seize for actors
autonumber 10
IexecHub --> Contributions
deactivate IexecHub
autonumber 10
Contributions --> Dispatcher : finalizedTask
deactivate Contributions
deactivate Dispatcher
deactivate TaskRequest
@enduml