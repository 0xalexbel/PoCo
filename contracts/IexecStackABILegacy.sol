pragma solidity ^0.5.10;
pragma experimental ABIEncoderV2;

import "./IexecStore.sol";
import "./delegates/IexecAccessors.sol";
import "./delegates/IexecAccessorsABILegacy.sol";
import "./delegates/IexecCategoryManager.sol";
import "./delegates/IexecPoco.sol";
import "./delegates/IexecOrderSignature.sol";
import "./delegates/IexecRelay.sol";


contract IexecStackABILegacy is IexecStore, IexecAccessorsABILegacy
{
	event CreateCategory(uint256 catid, string  name, string  description, uint256 workClockTimeRef);
	event Transfer(address indexed from, address indexed to, uint256 value);
	event Approval(address indexed owner, address indexed spender, uint256 value);
	event Withdraw(address owner, uint256 amount);
	event Reward  (address owner, uint256 amount, bytes32 ref);
	event Seize   (address owner, uint256 amount, bytes32 ref);
	event Lock    (address owner, uint256 amount);
	event Unlock  (address owner, uint256 amount);
	event OrdersMatched  (bytes32 dealid, bytes32 appHash, bytes32 datasetHash, bytes32 workerpoolHash, bytes32 requestHash, uint256 volume);
	event SchedulerNotice(address indexed workerpool, bytes32 dealid);
	event TaskInitialize(bytes32 indexed taskid, address indexed workerpool);
	event TaskContribute(bytes32 indexed taskid, address indexed worker, bytes32 hash);
	event TaskConsensus (bytes32 indexed taskid, bytes32 consensus);
	event TaskReveal    (bytes32 indexed taskid, address indexed worker, bytes32 digest);
	event TaskReopen    (bytes32 indexed taskid);
	event TaskFinalize  (bytes32 indexed taskid, bytes results);
	event TaskClaimed   (bytes32 indexed taskid);
	event AccurateContribution(address indexed worker, bytes32 indexed taskid);
	event FaultyContribution  (address indexed worker, bytes32 indexed taskid);
	event ClosedAppOrder       (bytes32 appHash);
	event ClosedDatasetOrder   (bytes32 datasetHash);
	event ClosedWorkerpoolOrder(bytes32 workerpoolHash);
	event ClosedRequestOrder   (bytes32 requestHash);
	// event BroadcastAppOrder       (IexecODBLibOrders.AppOrder        apporder       );
	// event BroadcastDatasetOrder   (IexecODBLibOrders.DatasetOrder    datasetorder   );
	// event BroadcastWorkerpoolOrder(IexecODBLibOrders.WorkerpoolOrder workerpoolorder);
	// event BroadcastRequestOrder   (IexecODBLibOrders.RequestOrder    requestorder   );

	function name() external view returns (string memory);
	function symbol() external view returns (string memory);
	function decimals() external view returns (uint8);
	function totalSupply() external view returns (uint256);
	function balanceOf(address) external view returns (uint256);
	function frozenOf(address) external view returns (uint256);
	function allowance(address,address) external view returns (uint256);
	// function viewAccount(address) external view returns (IexecODBLibCore.Account memory);
	function token() external view returns (address);
	// function viewDeal(bytes32) external view returns (IexecODBLibCore.Deal memory);
	function viewConsumed(bytes32) external view returns (uint256);
	function viewPresigned(bytes32) external view returns (bool);
	// function viewTask(bytes32) external view returns (IexecODBLibCore.Task memory);
	// function viewContribution(bytes32,address) external view returns (IexecODBLibCore.Contribution memory);
	function viewScore(address) external view returns (uint256);
	function resultFor(bytes32) external view returns (bytes memory);
	// function viewCategory(uint256) external view returns (IexecODBLibCore.Category memory);
	function countCategory() external view returns (uint256);
	function createCategory(string calldata,string calldata,uint256) external returns (uint256);
	function configure(uint256,address,string calldata,string calldata,uint8,address,address,address) external;
	function transfer(address,uint256) external returns (bool);
	function approve(address,uint256) external returns (bool);
	function transferFrom(address,address,uint256) external returns (bool);
	function increaseAllowance(address,uint256) external returns (bool);
	function decreaseAllowance(address,uint256) external returns (bool);
	function deposit(uint256) external returns (bool);
	function depositFor(uint256,address) external returns (bool);
	function depositForArray(uint256[] calldata,address[] calldata) external returns (bool);
	function withdraw(uint256) external returns (bool);
	function verifySignature(address,bytes32,bytes calldata) external view returns (bool);
	// function matchOrders(IexecODBLibOrders.AppOrder memory,IexecODBLibOrders.DatasetOrder memory,IexecODBLibOrders.WorkerpoolOrder memory,IexecODBLibOrders.RequestOrder memory) public returns (bytes32);
	function initialize(bytes32,uint256) external returns (bytes32);
	function contribute(bytes32,bytes32,bytes32,address,bytes calldata,bytes calldata) external;
	function reveal(bytes32,bytes32) external;
	function reopen(bytes32) external;
	function finalize(bytes32,bytes calldata) external;
	function claim(bytes32) external;
	function initializeArray(bytes32[] calldata,uint256[] calldata) external returns (bool);
	function claimArray(bytes32[] calldata) external returns (bool);
	function initializeAndClaimArray(bytes32[] calldata,uint256[] calldata) external returns (bool);
	// function signAppOrder            (IexecODBLibOrders.AppOrder        memory _apporder       ) public returns (bool);
	// function signDatasetOrder        (IexecODBLibOrders.DatasetOrder    memory _datasetorder   ) public returns (bool);
	// function signWorkerpoolOrder     (IexecODBLibOrders.WorkerpoolOrder memory _workerpoolorder) public returns (bool);
	// function signRequestOrder        (IexecODBLibOrders.RequestOrder    memory _requestorder   ) public returns (bool);
	// function cancelAppOrder          (IexecODBLibOrders.AppOrder        memory _apporder       ) public returns (bool);
	// function cancelDatasetOrder      (IexecODBLibOrders.DatasetOrder    memory _datasetorder   ) public returns (bool);
	// function cancelWorkerpoolOrder   (IexecODBLibOrders.WorkerpoolOrder memory _workerpoolorder) public returns (bool);
	// function cancelRequestOrder      (IexecODBLibOrders.RequestOrder    memory _requestorder   ) public returns (bool);
	// function broadcastAppOrder       (IexecODBLibOrders.AppOrder        memory _apporder       ) public;
	// function broadcastDatasetOrder   (IexecODBLibOrders.DatasetOrder    memory _datasetorder   ) public;
	// function broadcastWorkerpoolOrder(IexecODBLibOrders.WorkerpoolOrder memory _workerpoolorder) public;
	// function broadcastRequestOrder   (IexecODBLibOrders.RequestOrder    memory _requestorder   ) public;
}
